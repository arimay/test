require 'spec_helper'

describe "TimeCursor::Matcher#next" do
  [
    ["2015-02-26 01:23:30",                     "2015-02-26 01:23:45",  nil                   ],
    ["2015-02-26 01:23:45",                     "2015-02-26 01:23:45",  nil                   ],
    ["2015-02-26 01:24:00",                     "2015-02-26 01:23:45",  "2015-02-26 01:24:00" ],
  ].each do |time, base, expected|
    it "" do
      expect( TimeCursor.at( time ).next( base ).to_s ).to  eq( ( Time.parse( expected ) rescue nil ).to_s )
    end
  end

  [
    ["* * * * *",                               "2015-02-26 01:23:45",  "2015-02-26 01:24:00" ],
    ["1 * * * *",                               "2015-02-26 01:23:45",  "2015-02-26 02:01:00" ],
    ["1 2 * * *",                               "2015-02-26 01:23:45",  "2015-02-26 02:01:00" ],
    ["1 2 3 * *",                               "2015-02-26 01:23:45",  "2015-03-03 02:01:00" ],
    ["1 2 3 4 *",                               "2015-02-26 01:23:45",  "2015-04-03 02:01:00" ],
    ["1 2 * * 5",                               "2015-02-26 01:23:45",  "2015-02-27 02:01:00" ],
    ["*/10 * * * *",                            "2015-02-26 01:23:45",  "2015-02-26 01:30:00" ],
    ["0 2-23/4 * * *",                          "2015-02-26 01:23:45",  "2015-02-26 02:00:00" ],
    ["0 1 * * mon-fri",                         "2015-02-26 01:23:45",  "2015-02-27 01:00:00" ],
    ["0 1 1-7 * thr",                           "2015-02-26 01:23:45",  "2015-03-05 01:00:00" ],
    ["0 1 1-7 apr sat",                         "2015-02-26 01:23:45",  "2015-04-04 01:00:00" ],
  ].each do |patterns, base, expected|
    it "" do
      expect( TimeCursor.cron( patterns ).next( base ).to_s ).to  eq( ( Time.parse( expected ) rescue nil ).to_s )
    end
  end

  [
    [{},                                        "2015-02-26 01:23:45",  "2015-02-26 01:24:00" ],
    [{sec: 0},                                  "2015-02-26 01:23:45",  "2015-02-26 01:24:00" ],
    [{min: 0},                                  "2015-02-26 01:23:45",  "2015-02-26 02:00:00" ],
    [{hour: 0},                                 "2015-02-26 01:23:45",  "2015-02-27 00:00:00" ],
    [{wday: 'thr'},                             "2015-02-26 01:23:45",  "2015-03-05 00:00:00" ],
    [{day: 2},                                  "2015-02-26 01:23:45",  "2015-03-02 00:00:00" ],
    [{month: 3},                                "2015-02-26 01:23:45",  "2015-03-01 00:00:00" ],
    [{year: 2016},                              "2015-02-26 01:23:45",  "2016-01-01 00:00:00" ],

    [{sec: '0-59/20'},                          "2015-02-26 01:23:45",  "2015-02-26 01:24:00" ],
    [{sec: '*'},                                "2015-02-26 01:23:45",  "2015-02-26 01:23:46" ],
  ].each do |opts, base, expected|
    it "" do
      expect( TimeCursor.detail( **opts ).next( base ).to_s ).to  eq( ( Time.parse( expected ) rescue nil ).to_s )
    end
  end

end

describe "TimeCursor::Matcher#prev" do
  [
    ["2015-02-26 01:23:30",                     "2015-02-26 01:23:45",  "2015-02-26 01:23:30" ],
    ["2015-02-26 01:23:45",                     "2015-02-26 01:23:45",  nil                   ],
    ["2015-02-26 01:24:00",                     "2015-02-26 01:23:45",  nil                   ],
  ].each do |time, base, expected|
    it "" do
      expect( TimeCursor.at( time ).prev( base ).to_s ).to  eq( ( Time.parse( expected ) rescue nil ).to_s )
    end
  end

  [
    ["* * * * *",                               "2015-02-26 01:23:45",  "2015-02-26 01:23:00" ],
    ["1 * * * *",                               "2015-02-26 01:23:45",  "2015-02-26 01:01:00" ],
    ["1 2 * * *",                               "2015-02-26 01:23:45",  "2015-02-25 02:01:00" ],
    ["1 2 3 * *",                               "2015-02-26 01:23:45",  "2015-02-03 02:01:00" ],
    ["1 2 3 4 *",                               "2015-02-26 01:23:45",  "2014-04-03 02:01:00" ],
    ["1 2 * * 5",                               "2015-02-26 01:23:45",  "2015-02-20 02:01:00" ],
    ["*/10 * * * *",                            "2015-02-26 01:23:45",  "2015-02-26 01:20:00" ],
    ["0 2-23/4 * * *",                          "2015-02-26 01:23:45",  "2015-02-25 22:00:00" ],
    ["0 1 * * mon-fri",                         "2015-02-26 01:23:45",  "2015-02-26 01:00:00" ],
    ["0 1 1-7 * thr",                           "2015-02-26 01:23:45",  "2015-02-05 01:00:00" ],
    ["0 1 1-7 apr sat",                         "2015-02-26 01:23:45",  "2014-04-05 01:00:00" ],
  ].each do |patterns, base, expected|
    it "" do
      expect( TimeCursor.cron( patterns ).prev( base ).to_s ).to  eq( ( Time.parse( expected ) rescue nil ).to_s )
    end
  end

  [
    [{},                                        "2015-02-26 01:23:45",  "2015-02-26 01:23:00" ],
    [{sec: 0},                                  "2015-02-26 01:23:45",  "2015-02-26 01:23:00" ],
    [{min: 0},                                  "2015-02-26 01:23:45",  "2015-02-26 01:00:00" ],
    [{hour: 0},                                 "2015-02-26 01:23:45",  "2015-02-26 00:00:00" ],
    [{wday: 'thr'},                             "2015-02-26 01:23:45",  "2015-02-26 00:00:00" ],
    [{day: 2},                                  "2015-02-26 01:23:45",  "2015-02-02 00:00:00" ],
    [{month: 3},                                "2015-02-26 01:23:45",  "2014-03-01 00:00:00" ],
    [{year: 2014},                              "2015-02-26 01:23:45",  "2014-01-01 00:00:00" ],

    [{sec: '0-59/20'},                          "2015-02-26 01:23:45",  "2015-02-26 01:23:40" ],
    [{sec: '*'},                                "2015-02-26 01:23:45",  "2015-02-26 01:23:44" ],
  ].each do |opts, base, expected|
    it "" do
      expect( TimeCursor.detail( **opts ).prev( base ).to_s ).to  eq( ( Time.parse( expected ) rescue nil ).to_s )
    end
  end
end

